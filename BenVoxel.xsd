<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" elementFormDefault="qualified" vc:minVersion="1.1">
	<xs:element name="BenVoxel">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Metadata" type="MetadataType" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>
							The optional Metadata element which is an immediate child of the root element is considered global to the entire file. If metadata for a specific model is not present then it can be assumed that the global metadata is intended to apply. Model metadata overrides global metadata. This can be used to cut down on repeating the same metadata for multiple models in the same file.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Model" type="ModelType" minOccurs="1" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>
							A file can contain multiple models. Each model is expected to be compatible with the global metadata (if present) unless it has its own metadata to override the global metadata.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="MetadataType">
		<xs:annotation>
			<xs:documentation>
				Can be global to the entire file or associated with a model. Model metadata overrides global metadata.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Property" type="PropertyType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Point" type="PointType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Palette" type="PaletteType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PropertyType">
		<xs:annotation>
			<xs:documentation>
				Properties allow associating arbitrary string contents with names for embedding additional data not specified in this file format.
			</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="Name" type="NameAttributeType" use="required">
					<xs:annotation>
						<xs:documentation>
							Should be unique among its immediate sibling properties.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="PointType">
		<xs:annotation>
			<xs:documentation>
				Points associate a unique name with a point in 3D space. While actual voxels (and model sizes) are restricted to 16-bit unsigned integer coordinates, these points use 32-bit signed integers so that they can be set outside the bounds of the model.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="NameAttributeType" use="required">
			<xs:annotation>
				<xs:documentation>
					Should be unique among its immediate sibling points.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="X" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>
					Coordinate on the axis of width where 0 is the leftmost / western edge.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Y" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>
					Coordinate on the axis of depth where 0 is the nearest / southern edge.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Z" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>
					Coordinate on the axis of height where 0 is the bottom.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PaletteType">
		<xs:annotation>
			<xs:documentation>
				Contains between 1 and 256 32-bit colors with optional descriptions for each color.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Color" minOccurs="1" maxOccurs="256">
				<xs:annotation>
					<xs:documentation>
						The order of the Color elements is read as significant because, starting with 0, these colors are meant to correspond to the indices stored in the voxel geometry data. Since the value of 0 is reserved for empty voxels, the first color in every palette is interpreted as a background color for displaying transparency, leaving only 255 usable voxel colors or materials in this format.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="Argb" use="required">
						<xs:annotation>
							<xs:documentation>
								Four bytes expressed in eight hexademical characters from left to right for the alpha, red, green and blue channels of a 32-bit color.
							</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:pattern value="[0-9A-Fa-f]{8}"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="Description" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>
								A Description should stay associated with the color it describes even when the colors or their order changes. The first line of the Description should be a short, human-readable message such as could be displayed as a tooltip in an editor to remind the user what this color or material value is being used for without crowding the screen. Additional data not intended to be displayed in such a context, such as settings for an associated material, can be placed after the first line. Editors not actually using such additional data should still preserve it when saving and loading.
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Name" type="NameAttributeType" use="required">
			<xs:annotation>
				<xs:documentation>
					Should be unique among its immediate sibling palettes.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ModelType">
		<xs:sequence>
			<xs:element name="Metadata" type="MetadataType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Model metadata overrides any global metadata if present.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Geometry" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Contains binary data in the format of a sparse voxel octree. In the XML format, this data is encoded with Z85 to ensure valid XML characters. The binary format (.BEN files) stores this data raw, without Z85 encoding. The model sizes are omitted from the start of the binary data here since they are included as XML attributes instead. The size coordinates are outside the model and geometry data outside these bounds may be discarded. Dimensions of 0 are invalid. Setting one of the dimensions to the maximum extent of 65,535 will result in assignable coordinates for that axis maxing out at 65,534 to keep the implementation simple.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="Width" type="xs:unsignedShort" use="required">
								<xs:annotation>
									<xs:documentation>
										Extent of the model on the X axis.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="Depth" type="xs:unsignedShort" use="required">
								<xs:annotation>
									<xs:documentation>
										Extent of the model on the Y axis.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="Height" type="xs:unsignedShort" use="required">
								<xs:annotation>
									<xs:documentation>
										Extent of the model on the Z axis.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Name" type="NameAttributeType" use="required">
			<xs:annotation>
				<xs:documentation>
					Should uniquely identify the model within the file.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="NameAttributeType">
		<xs:annotation>
			<xs:documentation>
				Should be unique among the immediate siblings of its same element type.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:maxLength value="255"/>
		</xs:restriction>
		<xs:assert test="count(../*[@Name = current()]) = 1">
			<xs:annotation>
				<xs:documentation>
					Ensures Name attributes are unique among immediate siblings of the same element type. This constraint is crucial for proper implementation, as it prevents conflicts when storing data in Dictionary structures keyed by the Name attribute. Different element types or non-sibling elements of the same type can have the same Name attribute value without causing issues.
				</xs:documentation>
			</xs:annotation>
		</xs:assert>
	</xs:simpleType>
</xs:schema>
